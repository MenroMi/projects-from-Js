{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;ACzEP;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,2FAA2F;AAC3F,gFAAgF,UAAU,wCAAwC;AAClI,6EAA6E,UAAU,0BAA0B;AACjH,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS,UAAU;AAC3E;AACA;AACA;AACA;AACA,sDAAsD;AACtD,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,MAAM;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoiEAAe,SAAS;;;;;;UChOxB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN4C;AACT;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8DAAS;AACb,IAAI,yDAAK;AACT;AACA,CAAC,E","sources":["webpack://project_07/./src/js/modules/form.js","webpack://project_07/./src/js/modules/validator.js","webpack://project_07/webpack/bootstrap","webpack://project_07/webpack/runtime/define property getters","webpack://project_07/webpack/runtime/hasOwnProperty shorthand","webpack://project_07/webpack/runtime/make namespace object","webpack://project_07/./src/js/script.js"],"sourcesContent":["function forms(formPost) {\r\n\r\n    const wrapperRequest = document.querySelector(\".wrapper_after_request\"),\r\n    btnContinue = document.querySelector(\".request_button\");\r\n\r\n    const postData = form => {\r\n\r\n        form.addEventListener(\"submit\", (e) => {\r\n            e.preventDefault();\r\n\r\n            const divError = document.createElement(\"div\");\r\n            divError.textContent = \"Please, try again.\";\r\n            divError.classList.add(\"data_error\")\r\n\r\n            /* AJAX */\r\n\r\n            const request = new XMLHttpRequest();          \r\n            request.open(\"POST\", \"http://localhost:3000/posts\");\r\n\r\n            request.setRequestHeader(\"Content-type\", \"application/json\");\r\n            const formData = new FormData(form);\r\n            \r\n            const object = {};\r\n            formData.forEach((value, key) => {\r\n                object[key] = value;\r\n            });\r\n\r\n            const jsonForm = JSON.stringify(object);\r\n\r\n            request.send(jsonForm);\r\n\r\n            request.addEventListener(\"error\", (e) => {\r\n                e.preventDefault();\r\n                form.append(divError);\r\n                setTimeout(() => {\r\n                    divError.remove();\r\n                }, 3000);\r\n            });\r\n\r\n            request.addEventListener(\"load\", () => {\r\n                if (request.status >= 200 || request.status < 300) {\r\n                    console.log(request.response);\r\n                    form.reset();\r\n                    form.classList.add('hidden');\r\n                    wrapperRequest.classList.remove('hidden');\r\n                    console.log(form.classList.contains(\"hidden\"));\r\n                } else {\r\n                    form.reset();\r\n                    form.append(divError);\r\n                    setTimeout(() => {\r\n                        divError.remove();\r\n                    }, 3000);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const afterPost = (requestForm, form) => {\r\n        btnContinue.addEventListener(\"click\", () => {\r\n            if (form.classList.contains(\"hidden\")) {\r\n                requestForm.classList.add('hidden');\r\n                return form.classList.remove('hidden');\r\n            }\r\n            return;\r\n        })\r\n        return;\r\n    }\r\n\r\n    postData(formPost);\r\n    afterPost(wrapperRequest, formPost)\r\n\r\n}\r\n\r\nexport default forms;","\"use strict\";\r\n\r\nfunction validator(formPost) {\r\n    const\r\n        btnSubmit = document.querySelector(\".data_btn\"),\r\n        cardName = document.querySelector(\".card_front_name\"),\r\n        cardNumber = document.querySelector(\".card_front_number\"),\r\n        cardMonth = document.querySelector(\".card_front_date_m\"),\r\n        cardYear = document.querySelector(\".card_front_date_y\"),\r\n        cardCVV = document.querySelector(\".card_back_cvv\");\r\n\r\n    const usernameEl = document.querySelector(\"#username\"),\r\n        numberEl = document.querySelector(\"#cardnumber\"),\r\n        monthEl = document.querySelector(\"#month\"),\r\n        yearEl = document.querySelector(\"#year\"),\r\n        cvvCodeEl = document.querySelector(\"#code-cvv\");\r\n\r\n    const isRequired = value => value === '' ? true : false; // checking that input is not empty\r\n    const checkLength = (length, min, max) => length < min || length > max ? true : false; // check length\r\n    const checkSpecialCharactersAndNumbers = value => (/(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,./?])|(?=(.*[0-9]))/).test(value); // the regex checks the value for special characters and numbers.\r\n    const isCardNumber = value => (/(?=(.*[a-zA-Z]))|(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,./?])/).test(value); // must be only numbers\r\n    const isMonth = value => (/^((0?[1-9])|((1)[0-2]))$/).test(value); // check for month number. Should be from 00 to 12.\r\n    const isYear = value => (/^((0?[1-9])|(([0-9])[0-9])|99)$/).test(value);\r\n    // check for year number. From 01 to 99.\r\n\r\n    const showError = (input, msg) => {\r\n        input.classList.add(\"form-error\");\r\n        let divField;\r\n\r\n        if (input.id === \"month\" || input.id === \"year\") {\r\n            console.log(input.id);\r\n            divField = input.parentElement.parentElement;\r\n        } else {\r\n            divField = input.parentElement;\r\n        }\r\n        const errorMsg = divField.querySelector(\"small\");\r\n        errorMsg.style.color = 'red';\r\n        btnSubmit.disabled = true;\r\n\r\n        return errorMsg.textContent = msg;\r\n    };\r\n\r\n    const showSuccess = input => {\r\n        input.classList.remove(\"form-error\");\r\n        let divField;\r\n\r\n        if (input.id === \"month\" || input.id === \"year\") {\r\n            divField = input.parentElement.parentElement;\r\n        } else {\r\n            divField = input.parentElement;\r\n        }\r\n\r\n        const errorMsg = divField.querySelector(\"small\");\r\n        btnSubmit.disabled = false;\r\n        return errorMsg.textContent = '';\r\n    }\r\n\r\n\r\n\r\n    validateData(formPost);\r\n\r\n\r\n    function validateData(form) {\r\n        form.addEventListener('input', function (e) {\r\n\r\n            let parts = [];\r\n            const value = e.target.value,\r\n                id = e.target.id;\r\n\r\n            switch (id) {\r\n                case 'username':\r\n                    if (value.length > 25) {\r\n                        validateUsername(usernameEl);\r\n                        return;\r\n                    }\r\n                    cardName.textContent = value;\r\n                    validateUsername(usernameEl);\r\n                    break;\r\n                case 'cardnumber':\r\n\r\n                    for (let i = 0, len = value.length; i < len; i += 4) { // spacebar on front card picture\r\n                        parts.push(value.substring(i, i + 4))\r\n                    }\r\n\r\n                    if (value.length > 16) {\r\n                        validateCardNumber(numberEl); // without call function here didnt worked validation with amount of characters\r\n                        return; // without return all numbers are displayed on pic front card \r\n                    }\r\n\r\n                    if (parts.length) {\r\n                        cardNumber.textContent = parts.join(' ');\r\n                    }\r\n\r\n                    validateCardNumber(numberEl);\r\n                    break;\r\n                case 'month':\r\n                    if (value.length > 2) {\r\n                        validateCardMonth(monthEl);\r\n                        return;\r\n                    }\r\n                    cardMonth.textContent = value.length === 1 ? `0${value}` : value;\r\n                    validateCardMonth(monthEl);\r\n                    break;\r\n                case 'year':\r\n                    if (value.length > 2) {\r\n                        validateCardYear(yearEl);\r\n                        return;\r\n                    }\r\n                    cardYear.textContent = value.length === 1 ? `0${value}` : value;\r\n                    validateCardYear(yearEl);\r\n                    break;\r\n                case \"code-cvv\":\r\n                    if (value.length > 3) {\r\n                        validateCardCVV(cvvCodeEl);\r\n                        return;\r\n                    }\r\n                    cardCVV.textContent = value;\r\n                    validateCardCVV(cvvCodeEl);\r\n            }\r\n        });\r\n    }\r\n\r\n    function validateUsername(username) {\r\n\r\n        let min = 3, max = 25;\r\n        const name = username.value.trim();\r\n\r\n        if (isRequired(name)) {\r\n            showError(username, \"Can't be blank.\");\r\n        } else if (checkLength(name.length, min, max)) {\r\n            showError(username, `Wrong length. Your cardname must be between ${min} and ${max} characters.`);\r\n        } else if (checkSpecialCharactersAndNumbers(name)) {\r\n            showError(username, \"Without special characters or numbers.\");\r\n        }\r\n        else {\r\n            showSuccess(username);\r\n        }\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    function validateCardNumber(numbers) {\r\n\r\n        let min = 16, max = 16;\r\n        const numb = numbers.value.trim();\r\n\r\n        if (isRequired(numb)) {\r\n            showError(numbers, \"Can't be blank.\");\r\n        } else if (isCardNumber(numb)) {\r\n            showError(numbers, \"Wrong format. Only numbers\");\r\n        } else if (checkLength(numb.length, min, max)) {\r\n            showError(numbers, \"Must be 16 characters.\");\r\n        } else {\r\n            showSuccess(numbers);\r\n\r\n        }\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    function validateCardMonth(month) {\r\n\r\n        let min = 1, max = 2;\r\n        const numb = month.value.trim();\r\n\r\n        if (isRequired(numb)) {\r\n            showError(month, \"Can't be blank.\");\r\n        } else if (isCardNumber(numb)) {\r\n            showError(month, \"Only numbers.\");\r\n        } else if (!isMonth(numb)) {\r\n            showError(month, \"From 01 to 12.\");\r\n        } else if (checkLength(numb.length, min, max)) {\r\n            showError(month, \"Must be 2 characters.\");\r\n        } else {\r\n            showSuccess(month);\r\n        }\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    function validateCardYear(year) {\r\n\r\n        let min = 1, max = 2;\r\n        const numb = year.value.trim();\r\n\r\n        if (isRequired(numb)) {\r\n            showError(year, \"Can't be blank.\");\r\n        } else if (isCardNumber(numb)) {\r\n            showError(year, \"Only numbers.\");\r\n        } else if (!isYear(numb)) {\r\n            showError(year, \"From 01 to 99.\");\r\n        } else if (checkLength(numb.length, min, max)) {\r\n            showError(year, \"Must be 2 characters.\");\r\n        } else {\r\n            showSuccess(year);\r\n        }\r\n\r\n        return;\r\n\r\n    }\r\n\r\n    function validateCardCVV(cvv) {\r\n\r\n        let min = 3, max = 3;\r\n        const numb = cvv.value.trim();\r\n\r\n        if (isRequired(numb)) {\r\n            showError(cvv, \"Can't be blank.\");\r\n        } else if (isCardNumber(numb)) {\r\n            showError(cvv, \"Only numbers.\");\r\n        } else if (checkLength(numb.length, min, max)) {\r\n            showError(cvv, \"Must be 3 characters.\");\r\n        } else {\r\n            showSuccess(cvv);\r\n        }\r\n\r\n        return;\r\n    }\r\n}\r\n\r\n\r\nexport default validator;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import validator from \"./modules/validator\";\r\nimport forms from \"./modules/form\";\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n    const formForPost = document.querySelector(\"form\");\r\n\r\n    validator(formForPost);\r\n    forms(formForPost);\r\n\r\n});"],"names":[],"sourceRoot":""}